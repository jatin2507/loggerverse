{{#> layout title="Logs"}}
<div class="fade-in" x-data="logsPage()">
    <div class="mb-8 flex justify-between items-center">
        <div>
            <h1 class="text-3xl font-bold text-gray-900">Log Viewer</h1>
            <p class="mt-1 text-sm text-gray-500">Real-time log monitoring and filtering</p>
        </div>
        <div class="flex space-x-4">
            <button @click="toggleAutoScroll()"
                    class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">
                <span x-text="autoScroll ? 'Pause Auto-scroll' : 'Resume Auto-scroll'"></span>
            </button>
            <button @click="clearLogs()"
                    class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">
                Clear
            </button>
        </div>
    </div>

    <!-- Filters -->
    <div class="bg-white p-6 rounded-lg shadow-lg mb-6">
        <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Level</label>
                <select x-model="filters.level" @change="applyFilters()"
                        class="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                    <option value="">All Levels</option>
                    <option value="debug">Debug</option>
                    <option value="info">Info</option>
                    <option value="warn">Warning</option>
                    <option value="error">Error</option>
                    <option value="fatal">Fatal</option>
                </select>
            </div>
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Time Range</label>
                <select x-model="filters.timeRange" @change="applyFilters()"
                        class="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                    <option value="all">All Time</option>
                    <option value="1h">Last Hour</option>
                    <option value="24h">Last 24 Hours</option>
                    <option value="7d">Last 7 Days</option>
                </select>
            </div>
            <div class="md:col-span-2">
                <label class="block text-sm font-medium text-gray-700 mb-2">Search</label>
                <input type="text" x-model="filters.search" @input="applyFilters()"
                       placeholder="Search logs..."
                       class="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500">
            </div>
        </div>
    </div>

    <!-- Log Entries -->
    <div class="bg-white rounded-lg shadow-lg overflow-hidden">
        <div class="px-6 py-4 bg-gray-50 border-b border-gray-200 flex justify-between items-center">
            <div>
                <h3 class="text-lg font-medium text-gray-900">Log Entries</h3>
                <p class="text-sm text-gray-500">
                    Showing <span x-text="filteredLogs.length"></span> of <span x-text="logs.length"></span> logs
                </p>
            </div>
            <div class="flex items-center space-x-2">
                <div class="h-2 w-2 rounded-full" :class="isConnected ? 'bg-green-500 animate-pulse' : 'bg-red-500'"></div>
                <span class="text-sm text-gray-500" x-text="isConnected ? 'Live' : 'Disconnected'"></span>
            </div>
        </div>

        <div class="max-h-96 overflow-y-auto" x-ref="logContainer">
            <template x-for="log in filteredLogs.slice().reverse()" :key="log.timestamp + log.message">
                <div class="px-6 py-4 border-b border-gray-100 log-entry slide-in hover:bg-gray-50">
                    <div class="flex items-start space-x-4">
                        <div class="flex-shrink-0">
                            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium"
                                  :class="getLevelColor(log.level)" x-text="log.level.toUpperCase()">
                            </span>
                        </div>
                        <div class="flex-1 min-w-0">
                            <div class="flex items-center justify-between">
                                <p class="text-sm text-gray-900 font-medium" x-text="log.message"></p>
                                <span class="text-xs text-gray-500" x-text="formatTimestamp(log.timestamp)"></span>
                            </div>
                            <div class="mt-1 flex items-center text-xs text-gray-500 space-x-4">
                                <span>PID: <span x-text="log.pid"></span></span>
                                <span>Host: <span x-text="log.hostname"></span></span>
                                <template x-if="log.context?.requestId">
                                    <span>Request: <span x-text="log.context.requestId"></span></span>
                                </template>
                            </div>

                            <!-- Error Details -->
                            <template x-if="log.error">
                                <div class="mt-3 p-3 bg-red-50 border border-red-200 rounded-md">
                                    <div class="text-sm text-red-800 font-medium" x-text="log.error.name + ': ' + log.error.message"></div>
                                    <details class="mt-2">
                                        <summary class="text-xs text-red-600 cursor-pointer">Stack Trace</summary>
                                        <pre class="mt-2 text-xs text-red-700 bg-red-100 p-2 rounded overflow-x-auto" x-text="log.error.stack"></pre>
                                    </details>
                                </div>
                            </template>

                            <!-- Metadata -->
                            <template x-if="log.meta && Object.keys(log.meta).length > 0">
                                <details class="mt-3">
                                    <summary class="text-xs text-gray-600 cursor-pointer">Metadata</summary>
                                    <pre class="mt-2 text-xs text-gray-700 bg-gray-100 p-2 rounded overflow-x-auto" x-text="JSON.stringify(log.meta, null, 2)"></pre>
                                </details>
                            </template>

                            <!-- AI Analysis -->
                            <template x-if="log.aiAnalysis">
                                <div class="mt-3 p-3 bg-blue-50 border border-blue-200 rounded-md">
                                    <div class="text-sm text-blue-800 font-medium">AI Analysis</div>
                                    <p class="text-sm text-blue-700 mt-1" x-text="log.aiAnalysis.summary"></p>
                                    <template x-if="log.aiAnalysis.suggestedFix">
                                        <div class="mt-2">
                                            <div class="text-xs text-blue-600 font-medium">Suggested Fix:</div>
                                            <p class="text-xs text-blue-700" x-text="log.aiAnalysis.suggestedFix"></p>
                                        </div>
                                    </template>
                                    <div class="text-xs text-blue-600 mt-2">
                                        Confidence: <span x-text="(log.aiAnalysis.confidenceScore * 100).toFixed(1) + '%'"></span>
                                    </div>
                                </div>
                            </template>
                        </div>
                    </div>
                </div>
            </template>

            <template x-if="filteredLogs.length === 0">
                <div class="px-6 py-12 text-center">
                    <div class="text-gray-400 mb-2">
                        <svg class="mx-auto h-12 w-12" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                        </svg>
                    </div>
                    <p class="text-gray-500">No logs match your current filters</p>
                </div>
            </template>
        </div>
    </div>
</div>

<script>
    function logsPage() {
        return {
            logs: {{{json recentLogs}}},
            filteredLogs: [],
            filters: {
                level: '',
                timeRange: 'all',
                search: ''
            },
            autoScroll: true,
            isConnected: false,

            init() {
                this.filteredLogs = [...this.logs];

                if (window.socket) {
                    this.isConnected = true;

                    socket.on('live_logs', (newLogs) => {
                        this.logs.push(...newLogs);
                        this.applyFilters();

                        if (this.autoScroll) {
                            this.$nextTick(() => {
                                const container = this.$refs.logContainer;
                                container.scrollTop = container.scrollHeight;
                            });
                        }
                    });

                    socket.on('connect', () => {
                        this.isConnected = true;
                    });

                    socket.on('disconnect', () => {
                        this.isConnected = false;
                    });
                }
            },

            applyFilters() {
                let filtered = [...this.logs];

                // Level filter
                if (this.filters.level) {
                    filtered = filtered.filter(log => log.level === this.filters.level);
                }

                // Time range filter
                if (this.filters.timeRange !== 'all') {
                    const now = Date.now();
                    const ranges = {
                        '1h': 60 * 60 * 1000,
                        '24h': 24 * 60 * 60 * 1000,
                        '7d': 7 * 24 * 60 * 60 * 1000
                    };
                    const cutoff = now - ranges[this.filters.timeRange];
                    filtered = filtered.filter(log => log.timestamp >= cutoff);
                }

                // Search filter
                if (this.filters.search.trim()) {
                    const searchTerm = this.filters.search.toLowerCase();
                    filtered = filtered.filter(log => {
                        return log.message.toLowerCase().includes(searchTerm) ||
                               log.hostname.toLowerCase().includes(searchTerm) ||
                               (log.error && log.error.message.toLowerCase().includes(searchTerm)) ||
                               (log.meta && JSON.stringify(log.meta).toLowerCase().includes(searchTerm));
                    });
                }

                this.filteredLogs = filtered;
            },

            toggleAutoScroll() {
                this.autoScroll = !this.autoScroll;
            },

            clearLogs() {
                this.logs = [];
                this.filteredLogs = [];
            },

            getLevelColor(level) {
                const colors = {
                    debug: 'bg-blue-100 text-blue-800',
                    info: 'bg-green-100 text-green-800',
                    warn: 'bg-yellow-100 text-yellow-800',
                    error: 'bg-red-100 text-red-800',
                    fatal: 'bg-red-200 text-red-900',
                };
                return colors[level] || 'bg-gray-100 text-gray-800';
            },

            formatTimestamp(timestamp) {
                return new Date(timestamp).toLocaleString();
            }
        }
    }
</script>
{{/layout}}